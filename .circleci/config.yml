##
## SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>
## SPDX-License-Identifier: LicenseRef-Splunk-8-2021
##
##
# jscpd:ignore-start
version: 2.1
orbs:
  go: circleci/go@0.2.0
  splunk-app-package:
    jobs:
      package:
        docker:
          - image: circleci/buildpack-deps:oldstable
        resource_class: small
        steps:
          - checkout
          - run:
              name: Setup Environment
              command: |
                sudo apt-get update
                sudo apt-get install -y python2 python-pip python-virtualenv python3 python3.7 python3-pip python3-virtualenv
                sudo pip3 install poetry                  
                python3.7 -m virtualenv ~/.venv -p python3
                source ~/.venv/bin/activate
                pip install pip --upgrade
                if [ -f "poetry.lock" ]
                then
                  mkdir -p package/lib || true
                  poetry export --without-hashes -o package/lib/requirements.txt
                  poetry export --without-hashes --dev -o requirements_dev.txt
                fi
                pip install -r requirements_dev.txt --use-deprecated=legacy-resolver || true
                pip install semantic_version==2.6.0
                sudo apt install npm
                if [ -f "yarn.lock" ]
                then
                  sudo npm install --global yarn
                  yarn
                fi
                if [ -f "build.gradle" ]
                then
                  sudo apt-get install -y gradle
                  gradle -v
                fi

          - run:
              name: Generate Addon
              command: |
                touch nextRelease.txt
                npx -p @semantic-release/exec -p semantic-release@17.0.0 -p semantic-release/git -p semantic-release/github \
                  semantic-release --dry-run \
                  --plugins "@semantic-release/commit-analyzer,@semantic-release/exec,@semantic-release/git,@semantic-release/github" \
                  --analyzeCommits @semantic-release/commit-analyzer \
                  --verifyRelease @semantic-release/exec \
                  --verifyReleaseCmd 'echo ${nextRelease.version} > nextRelease.txt'
                sed -i "s/-beta./b/g" nextRelease.txt
                VERSION=$(cat nextRelease.txt)
                echo VERSION="$VERSION"
                echo CIRCLE_TAG=$CIRCLE_TAG
                source ~/.venv/bin/activate
                if [ -z "$CIRCLE_TAG" ]
                then
                  ucc-gen --ta-version="$VERSION"
                else
                  CIRCLE_TAG=${CIRCLE_TAG:1}
                  echo CIRCLE_TAG=$CIRCLE_TAG
                  ucc-gen --ta-version="$CIRCLE_TAG"
                fi
                if [ -f "yarn.lock" ]
                then
                  yarn run build
                fi
          - run:
              name: Generating package
              command: |
                PACKAGE_ID=$(ls output/)
                BUILD_DIR=output/$PACKAGE_ID
                find $BUILD_DIR/lib -executable -type f -exec chmod -x {} \; 2>/dev/null || true
                source ~/.venv/bin/activate
                slim generate-manifest $BUILD_DIR --update >/tmp/app.manifest   || true
                cp  /tmp/app.manifest  $BUILD_DIR/app.manifest
                mkdir -p build/package/splunkbase
                mkdir -p build/package/deployment
                slim package -o build/package/splunkbase $BUILD_DIR 
                mkdir -p build/package/deployment
                PACKAGE=$(ls build/package/splunkbase/*)
                slim partition $PACKAGE -o build/package/deployment/ || true
                slim validate $PACKAGE
          - persist_to_workspace:
              root: /home/circleci/project
              paths:
                - output
                - build
          - store_artifacts:
              path: build/package/splunkbase
              destination: build-package-splunkbase
          - store_artifacts:
              path: build/package/deployment
              destination: build-package-deployment
          - store_artifacts:
              path: build/VERSION
              destination: build-version

  splunk-release:
    executors:
      python37:
        docker:
          - image: circleci/python:3.7
    commands:
      tag:
        parameters:
          tag_level:
            description: Tag level
            type: string
        steps:
          - run:
              name: TAG
              command: |
                git remote set-url origin https://${GH_USER}:${GH_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
                ./semtag <<parameters.tag_level>>
      merge-to-main:
        steps:
          - run:
              name: Merge
              command: |
                git remote set-url origin https://${GH_USER}:${GH_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
                git config --global user.email "addonreleasesrv@splunk.com"
                git config --global user.name "Add on release service"
                git pull origin main
                git merge main -m "Merge from main"
                git checkout main
                git merge develop
                git push
    jobs:
      tag:
        parameters:
          tag_level:
            description: Tag level
            type: string
        executor: python37
        steps:
          - checkout
          - tag:
              tag_level: <<parameters.tag_level>>
      merge-to-main:
        executor: python37
        steps:
          - checkout
          - merge-to-main

jobs:
  splunk-app-inspect:
    parameters:
      options:
        description: Inspect options
        type: string
        default: --mode test
      label:
        description: string to identify test options in file name of output
        type: string
        default: test
    docker:
      - image: circleci/python:3.7
    resource_class: medium

    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install
          command: |
            python -m venv ~/.venv
            source ~/.venv/bin/activate
            pip install splunk-appinspect
      - run:
          name: inspect
          command: |
            source ~/.venv/bin/activate
            mkdir test-results || true
            PACKAGE=$(ls /tmp/workspace/build/package/splunkbase/*)
            if [ "<<parameters.label>>" == "cloud" ]; then TEST_PARM="--mode precert --included-tags cloud"; fi
            if [ "<<parameters.label>>" == "appinspect" ]; then TEST_PARM="--mode test"; fi
            splunk-appinspect inspect <<parameters.options>> --data-format junitxml --output-file test-results/$CIRCLE_PROJECT_REPONAME-appinspect-mode-<<parameters.label>>.xml $PACKAGE || true
      - run:
          name: report
          command: |
            source ~/.venv/bin/activate
            export VERSION=$(./semtag getfinal)
            [ "${VERSION}" == "<< pipeline.git.tag >>" ] && export RELEASE=<< pipeline.git.tag >> || export RELEASE=${VERSION}-post            
            cat test-results/$CIRCLE_PROJECT_REPONAME-appinspect-mode-<<parameters.label>>.xml | sed 's/<skipped\/>//g' | sed 's/skipped[^ ]*/skipped=\"0\"/g' >/tmp/$CIRCLE_PROJECT_REPONAME-appinspect-mode-<<parameters.label>>.xml
            zip -j /tmp/$CIRCLE_PROJECT_REPONAME-appinspect-mode-<<parameters.label>>.zip /tmp/$CIRCLE_PROJECT_REPONAME-appinspect-mode-<<parameters.label>>.xml

            # LUUID=$(curl -X POST "$RP_ENDPOINT/api/v1/addonfactory/launch/import" -H "accept: */*" -H "Content-Type: multipart/form-data" -H "Authorization: bearer $RP_UUID" -F "file=@/tmp/$CIRCLE_PROJECT_REPONAME-appinspect-mode-<<parameters.label>>.zip;type=application/zip" 2>/dev/null | sed 's/\(.*id = \)\([^ ]*\)\(.*\)/\2/')
            # echo LUUID=$LUUID
            # LID=$(curl -X GET "$RP_ENDPOINT/api/v1/addonfactory/launch/uuid/$LUUID" -H "accept: */*" -H "Authorization: bearer $RP_UUID" 2>/dev/null| jq .id)            
            # echo LID=$LID
            # APPINSPECTVER=$(splunk-appinspect list version | sed 's/\(.*Version \)\(.*\)/\2/')
            # UPDATE="
            #     { \"attributes\": 
            #         [ 
            #             { \"key\": \"job\",
            #             \"value\": \"${CIRCLE_JOB}\"
            #             },
            #             { \"key\": \"appinspect\",
            #             \"value\": \"$APPINSPECTVER\"
            #             },
            #             { \"key\": \"branch\",
            #             \"value\": \"<< pipeline.git.branch >>\"
            #             },
            #             { \"key\": \"commit\",
            #             \"value\": \"${CIRCLE_SHA1}\"
            #             },
            #             { \"key\": \"release\",
            #             \"value\": \"${RELEASE}\"
            #             },
            #             { \"key\": \"version\",
            #             \"value\": \"$(./semtag getcurrent)\"
            #             },
            #             { \"key\": \"repo\",
            #             \"value\": \"$CIRCLE_PROJECT_REPONAME\"
            #             }
            #         ]
            #     }"
            # echo $UPDATE | jq
            # curl -X PUT "$RP_ENDPOINT/api/v1/addonfactory/launch/$LID/update" \
            #   -H "accept: */*" \
            #   -H "Content-Type: application/json" \
            #   -H "Authorization: bearer $RP_UUID" \
            #   -d "$UPDATE"
      - run:
          name: set result
          command: |
            if grep failures=\"[1-9] test-results/$CIRCLE_PROJECT_REPONAME-appinspect-mode-<<parameters.label>>.xml>/dev/null; then exit 1; else exit 0; fi
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results
  splunk-app-test:
    parameters:
      splunk_version:
        description: Image version
        type: string
        default: latest
      test_set:
        description: Test Set
        type: string
        default: knowledge
      sc4s_version:
        description: sc4s version
        type: string
        default: latest
      resource_class:
        description: Docker CicreCi machine size
        type: string
        default: large
    docker:
      - image: circleci/python:3.7
    resource_class: <<parameters.resource_class>>
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Setup for testing
          command: |
            pip install git+https://github.com/pixelb/crudini        
            mkdir test-results
            cp -rf /tmp/workspace/* .
            mkdir -p deps/apps/splunk-add-on-for-modinput-test/output
            cd deps/apps/splunk-add-on-for-modinput-test/output
            curl -s https://api.github.com/repos/splunk/splunk-add-on-for-modinput-test/releases/latest | grep "Splunk_TA.*tar.gz" | grep -v search_head | grep -v indexer | grep -v forwarder | cut -d : -f 2,3 | tr -d \" | wget -qi - || true
            ls
            tar -xzf *.tar.gz
            ls
            rm *.tar.gz
            ls
      - run:
          name: generate requirements
          command: |
            if [ -f "poetry.lock" ]
            then
              mkdir -p package/lib || true
              pip install poetry
              poetry export --without-hashes -o package/lib/requirements.txt
              poetry export --without-hashes --dev -o requirements_dev.txt
            fi
      - run:
          name: Splunk Testing
          no_output_timeout: 2h
          command: |
            # Start Splunk
            TEST_TYPE=$(echo "<<parameters.test_set>>" | awk -F- '{print $1}' )
            BROWSER=$(echo "<<parameters.test_set>>" | awk -F- '{print $2}' )
            export IMAGE_TAG="3.7-browsers"

            [ ! -d "tests/$TEST_TYPE" ] && exit 0
            [ "$BROWSER" = "safari" ] && [ "$UI_TEST_HEADLESS" = "true" ] && exit 0
            export SPLUNK_VERSION=$(crudini --get deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf "<<parameters.splunk_version>>" VERSION)
            export SC4S_VERSION=$(crudini --get deps/build/addonfactory_test_matrix_splunk/SC4S_matrix.conf "<<parameters.sc4s_version>>" VERSION)
            export SPLUNK_APP_ID=$(crudini --get package/default/app.conf id name)
            export SPLUNK_APP_PACKAGE=output/$(ls output/)
            export TEST_SET=tests/$TEST_TYPE
            export TEST_TYPE=$TEST_TYPE
            export TEST_BROWSER=$BROWSER
            # JOB_NAME: For Saucelabs integration. Used as a build-name.
            export JOB_NAME="CircleCI::$CIRCLE_PROJECT_REPONAME[$CIRCLE_BRANCH][$TEST_BROWSER] #$CIRCLE_BUILD_NUM"
            export SAUCE_IDENTIFIER=$SAUCE_IDENTIFIER-$(cat /proc/sys/kernel/random/uuid)

            #export env credentials
            if [ -f ".circleci/testcredentials.sh" ]; then
                bash ./.circleci/testcredentials.sh
            fi

            #Report portal integration
            export RP_LAUNCH_ATTRIBUTES="'job:${CIRCLE_JOB}' 'deployment:byoe' 'splunkmajor:<< parameters.splunk_version >>' 'splunk:${SPLUNK_VERSION}' 'branch:<< pipeline.git.branch >>' 'commit:${CIRCLE_SHA1}' 'release:${RELEASE}' 'version:$(./semtag getcurrent)' 'test_set:<<parameters.test_set>>' 'repo:${CIRCLE_PROJECT_REPONAME}'"
            export RP_PROJECT=addonfactory

            export RP_LAUNCH="$CIRCLE_PROJECT_REPONAME-$(echo <<parameters.test_set>> | sed 's/\(.*\)\(-.*\)/\1/')"
            export RP_LAUNCH_DESC="ci run"

            # Build
            docker-compose -f docker-compose-ci.yml build

            # Saucelab connection
            [ -z $BROWSER ] || [ "$UI_TEST_HEADLESS" = "true" ] || docker-compose -f docker-compose-ci.yml up -d sauceconnect

            # Start selenium grid if needed.
             if [[ "<<parameters.test_set>>" == *"firefox_grid"* ]]; then docker-compose -f docker-compose-ci.yml up -d firefox-grid; fi
             if [[ "<<parameters.test_set>>" == *"chrome_grid"* ]]; then docker-compose -f docker-compose-ci.yml up -d chrome-grid; fi


            # Start Splunk
            docker-compose -f docker-compose-ci.yml up -d splunk
            until docker-compose -f docker-compose-ci.yml logs splunk | grep "Ansible playbook complete" ; do sleep 1; done
            # Run a Splunk Diag
            mkdir /tmp/diag
            diag=$(docker-compose -f docker-compose-ci.yml exec splunk sudo -u splunk /opt/splunk/bin/splunk diag | grep "Splunk diagnosis file created" | sed -n 's/.* \(\/.*\.gz\)/\1/p') 
            docker-compose -f docker-compose-ci.yml exec splunk sudo chmod +r ${diag//[$'\t\r\n']}
            docker cp project_splunk_1:${diag//[$'\t\r\n']} /tmp/diag
            # Check with btool
            docker-compose -f docker-compose-ci.yml exec splunk sudo /opt/splunk/bin/splunk cmd btool check
            docker-compose -f docker-compose-ci.yml up -d splunk uf
            until docker-compose -f docker-compose-ci.yml logs splunk | grep "Ansible playbook complete" ; do sleep 1; done
            until docker-compose -f docker-compose-ci.yml logs uf | grep "Ansible playbook complete" ; do sleep 1; done

            # Normal Inspecting
            [ -z $BROWSER ] || [ "$UI_TEST_HEADLESS" = "true" ] || docker-compose -f docker-compose-ci.yml logs sauceconnect
            docker-compose -f docker-compose-ci.yml logs sc4s
            docker ps -a
                            
            # Run the tests
            test_exit_code=0

            docker-compose -f docker-compose-ci.yml up --abort-on-container-exit test || test_exit_code=$?
            # Collect Results
            docker container create --name dummy \
                                -v project_results:/home/circleci/work \
                                registry.access.redhat.com/ubi7/ubi
            docker cp dummy:/home/circleci/work/test-results/test.xml test-results/  || echo "ignoring..."
            docker cp dummy:/home/circleci/work/assets test-results/assets  || echo "ignoring..."
            docker cp dummy:/home/circleci/work/report.html test-results/report.html  || echo "ignoring..."
            docker cp dummy:/home/circleci/work/test-results/cim-compliance-report.md test-results/ || echo "ignoring..."
            docker cp dummy:/home/circleci/work/cim_field_report.json test-results/ || echo "ignoring..."
            docker-compose -f docker-compose-ci.yml down || echo "ignoring..."
            exit "$test_exit_code"
      - store_artifacts:
          path: /tmp/diag
          destination: test-diag
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results

  splunk-app-unit-test:
    parameters:
      test_set:
        description: Test Set
        type: string
        default: py3-3.7.8
    docker:
      - image: circleci/python:3.7
    resource_class: small
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Setup for testing
          command: |
            pip install git+https://github.com/pixelb/crudini        
            mkdir test-results
            cp -rf /tmp/workspace/* .
            mkdir -p deps/apps/splunk-add-on-for-modinput-test/output
            cd deps/apps/splunk-add-on-for-modinput-test/output
            curl -s https://api.github.com/repos/splunk/splunk-add-on-for-modinput-test/releases/latest | grep "Splunk_TA.*tar.gz" | grep -v search_head | grep -v indexer | grep -v forwarder | cut -d : -f 2,3 | tr -d \" | wget -qi - || true
            ls
            tar -xzf *.tar.gz
            ls
            rm *.tar.gz
            ls
      - run:
          name: generate requirements
          command: |
            if [ -f "poetry.lock" ]
            then
              mkdir -p package/lib || true
              pip install poetry
              poetry export --without-hashes -o package/lib/requirements.txt
              poetry export --without-hashes --dev -o requirements_dev.txt
            fi
      - run:
          name: Splunk Testing
          no_output_timeout: 2h
          command: |
            PYTHON_VERSION=$(echo "<<parameters.test_set>>" | awk -F- '{print $1}' )
            export IMAGE_TAG=$(echo "<<parameters.test_set>>" | awk -F- '{print $2}' )
            [ ! -d "tests/unit" ] && exit 0
            export SPLUNK_VERSION=latest
            export SC4S_VERSION=latest
            export SPLUNK_APP_ID=$(crudini --get package/default/app.conf id name)
            export SPLUNK_APP_PACKAGE=output/$(ls output/)
            export TEST_SET=tests/unit
            export TEST_TYPE=unit
            #export env credentials
            if [ -f ".circleci/testcredentials.sh" ]; then
                bash ./.circleci/testcredentials.sh
            fi
            #Report portal integration
            export RP_LAUNCH_ATTRIBUTES="'job:${CIRCLE_JOB}' 'deployment:byoe' 'branch:<< pipeline.git.branch >>' 'commit:${CIRCLE_SHA1}' 'release:${RELEASE}' 'version:$(./semtag getcurrent)' 'test_set:<<parameters.test_set>>' 'repo:${CIRCLE_PROJECT_REPONAME}'"
            export RP_PROJECT=addonfactory
            export RP_LAUNCH="$CIRCLE_PROJECT_REPONAME-$(echo <<parameters.test_set>> | sed 's/\(.*\)\(-.*\)/\1/')"
            export RP_LAUNCH_DESC="ci run"
            # Build
            docker-compose -f docker-compose-ci.yml build test
            docker ps -a
                            
            # Run the tests
            test_exit_code=0
            docker-compose -f docker-compose-ci.yml up --abort-on-container-exit test || test_exit_code=$?
            # Collect Results
            docker container create --name dummy \
                                -v project_results:/home/circleci/work \
                                registry.access.redhat.com/ubi7/ubi
            docker cp dummy:/home/circleci/work/test-results/test.xml test-results/  || echo "ignoring..."
            docker-compose -f docker-compose-ci.yml down || echo "ignoring..."
            exit "$test_exit_code"
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results

  semgrep:
    environment:
      SEMGREP_REPO_URL: << pipeline.project.git_url >>
      SEMGREP_BRANCH: << pipeline.git.branch >>
    docker:
      - image: returntocorp/semgrep-agent:v1
        user: root
    resource_class: medium
    steps:
      - checkout
      - run:
          name: "Install Dependencies"
          command: |
            pip3 install --upgrade semgrep
      - run:
          name: "Semgrep Scan"
          no_output_timeout: 1h
          command: |
            export SEMGREP_REPO_NAME=splunk/${CIRCLE_PROJECT_REPONAME}
            python -m semgrep_agent --publish-deployment ${SEMGREP_DEPLOYMENT_ID} --publish-token ${SEMGREP_PUBLISH_TOKEN}

            # Generate the Semgrep Dashboard URL
            export REPO_BRANCH=$(echo "<< pipeline.git.branch >>")
            DASHBOARD_URL=$(python3 -c "from urllib.parse import quote; import os; print('https://semgrep.dev/manage/findings?repo=' + quote(os.environ['SEMGREP_REPO_NAME'], safe='') + '&tab=findings&ref_type=branch&ref=' + quote(os.environ['REPO_BRANCH'], safe=''))")
            echo "View Result at Semgrep Dashboard: $DASHBOARD_URL"

            # Semgrep Exclude files
            dos2unix .semgrepignore
            SEMGREP_EXCLUDE=$(sed "/^#/d" .semgrepignore | sed "/^:/d" | sed -r '/^\s*$/d' | sed ':a;N;$!ba;s/\n/ --exclude /g')
            echo "Excluding Semgrep Files: --exclude $SEMGREP_EXCLUDE"

            # Generate xml file
            semgrep --config="p/r2c-ci" --config="p/r2c-security-audit" --config="p/bandit" --error --strict --timeout=0 --junit-xml -o /root/project/test-results/semgrep-scan.xml --exclude $SEMGREP_EXCLUDE
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results

  release:
    docker:
      - image: circleci/node:12
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: "Apply Release Tag"
          command: |
            npx -p @semantic-release/exec -p semantic-release@17.0.0 -p semantic-release/git -p semantic-release/github \
                semantic-release
  publish-gh:
    docker:
      - image: circleci/python:3.7
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - go/install
      - run:
          name: "Publish on GitHub"
          command: |
            PATH=$PATH:/usr/local/go/bin
            go get -v -u github.com/tcnksm/ghr
            $HOME/go/bin/ghr -t ${GH_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -replace "<< pipeline.git.tag >>" /tmp/workspace/build/package/splunkbase
            $HOME/go/bin/ghr -t ${GH_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -replace "<< pipeline.git.tag >>" /tmp/workspace/build/package/deployment

  publish-sbase:
    docker:
      - image: circleci/python:3.7
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Install utils
          command: |
            pip install git+https://github.com/pixelb/crudini
      - run:
          name: "Publish on Splunkbase"
          command: |
            source .splunkbase
            PACKAGE=$(ls /tmp/workspace/build/package/splunkbase/*)
            PACKAGE_ID=$(crudini --get package/default/app.conf id name)
            [[ << pipeline.git.tag >> =~ ^v[0-9]*.[0-9]*.[0-9]*$ ]] || export ISPRE=-prerelease
            [ "${ISPRE}" == "-prerelease" ] && SPLUNKBASE_VIS="false" || SPLUNKBASE_VIS="true"
            curl -u ${SPLUNKBASE_USERNAME}:${SPLUNKBASE_PASSWORD}  --request POST https://splunkbase.splunk.com/api/v1/app/${SPLUNKBASE_ID}/new_release/ -F "files[]=@${PACKAGE}" -F "filename=${PACKAGE_ID}.spl" -F "splunk_versions=${SPLUNKBASE_SPLUNK_VERSION}" -F "visibility=${SPLUNKBASE_VIS}"
  reuse:
    docker:
      - image: circleci/python:3.7
    resource_class: small
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Install
          command: |
            python -m venv ~/.venv
            source ~/.venv/bin/activate
            pip install reuse
      - run:
          name: reuse-lint
          command: |
            source ~/.venv/bin/activate
            reuse lint
workflows:
  build:
    jobs:
      - semgrep:
          context:
            - gdi-semgrep
          filters:
            branches:
              only: /.*/
      - reuse:
          filters:
            branches:
              only: /.*/
      - splunk-app-package/package:
          name: package
          filters:
            branches:
              only: /.*/
      - splunk-app-inspect:
          context:
            - gdi-reportportal
          matrix:
            parameters:
              label: ["appinspect", "cloud"]
          filters:
            branches:
              only: /.*/
          requires:
            - package
      - splunk-app-test:
          context:
            - gdi-saucelabs
            - gdi-reportportal
          requires:
            - package
          matrix:
            alias: splunk-app-test-knowledge
            parameters:
              splunk_version: ["8.0", "8.2"]
              sc4s_version: ["1"]
              test_set: ["knowledge"]
              resource_class: ["medium"]
          filters:
            branches:
              only: /.*/
      - splunk-app-test:
          context:
            - gdi-saucelabs
            - gdi-reportportal
          requires:
            - package
          matrix:
            alias: splunk-app-test-requirement-test
            parameters:
              splunk_version: ["8.1"]
              sc4s_version: ["1"]
              test_set: ["requirement_test"]
          filters:
            branches:
              only: /.*/
      - splunk-app-test:
          context:
            - gdi-saucelabs
            - gdi-reportportal
          requires:
            - package
          matrix:
            alias: splunk-app-test-ui
            parameters:
              splunk_version: ["8.0", "8.2"]
              sc4s_version: ["1"]
              test_set: ["ui-chrome_grid"] # requires smartx >= 2.0.8 please check before merge
              resource_class: ["medium"]
          filters:
            branches:
              only: /.*/
      - splunk-app-test:
          context:
            - gdi-reportportal
          requires:
            - package
          matrix:
            alias: splunk-app-test-modinput
            parameters:
              splunk_version: ["8.0", "8.2"]
              sc4s_version: ["1"]
              test_set: ["modinput_functional", "modinput_others"]
              resource_class: ["large"]
          filters:
            branches:
              only: /.*/
      - splunk-app-unit-test:
          context:
            - gdi-saucelabs
            - gdi-reportportal
          requires:
            - package
          matrix:
            parameters:
              test_set: ["py3-3.7.4", "py3-3.7.8"]
          filters:
            branches:
              only: /.*/
      - approval-release:
          requires:
            - package
            - splunk-app-inspect
            - splunk-app-test-knowledge
            - splunk-app-test-ui
            - splunk-app-test-modinput
            - splunk-app-unit-test
          context:
            - gdi-github
          type: approval
          filters:
            branches:
              only:
                - main
                - develop
      - release:
          requires:
            - approval-release
          context:
            - gdi-github
  publish:
    jobs:
      - splunk-app-package/package:
          name: package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*.*$/
      - publish-gh:
          context:
            - gdi-github
          requires:
            - package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*.*$/
      - publish-sbase:
          context:
            - gdi-splunkbase
          requires:
            - package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*$/
# jscpd:ignore-end
