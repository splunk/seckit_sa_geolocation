# This is a basic workflow to help you get started with Actions
# jscpd:ignore-start
name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [main, develop]

jobs:
  compliance-sample-scanner:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: sample-scanner
        uses: splunk/addonfactory-sample-scanner@v1
        id: sample-scanner
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  compliance-dependencies:
    name: compliance-dependencies
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: ort-action
        uses: splunk/addonfactory-ort-action@v1
        id: ort-action
        with:
          WorkDir: .
          UsePython3: "3.7"
      - name: ort-action-artifacts-reports
        uses: actions/upload-artifact@v2
        with:
          name: analysis-reports
          path: |
            .ort/reports/*
        if: always()
      - name: ort-action-artifacts-analyzer
        uses: actions/upload-artifact@v2
        with:
          name: analysis-analyzer
          path: |
            .ort/analyzer/*
        if: always()
  compliance-copyrights:
    name: compliance-copyrights
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v1.1

  lint:
    runs-on: ubuntu-latest
    name: quality-lint
    steps:
      - uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0
      - name: quality-lint
        uses: docker://ghcr.io/github/super-linter:slim-v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILTER_REGEX_EXCLUDE: README.md
  review_secrets:
    name: security-detect-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
          fetch-depth: "0"
      - name: Trufflehog Actions Scan
        uses: edplato/trufflehog-actions-scan@v0.9j-beta
        with:
          scanArguments: "--max_dept 50 -x .github/workflows/exclude-patterns.txt"

  semgrep:
    runs-on: ubuntu-latest
    name: security-sast-semgrep
    steps:
      - uses: actions/checkout@v2
      - name: Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/r2c
  snyk:
    name: security-vuln-snyk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Run Check there are libraries to scan
        id: checklibs
        run: if [ -f package/lib/requirements.txt ]; then echo "::set-output name=ENABLED::true"; fi
      - name: pip cache
        if: ${{ steps.checklibs.outputs.ENABLED == 'true' }}
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('package/lib/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps
        if: ${{ steps.checklibs.outputs.ENABLED == 'true' }}
        run: pip install -r package/lib/requirements.txt
      - uses: snyk/actions/setup@master
      - uses: actions/setup-go@v2.1.4
        with:
          go-version: "1.13"
      - name: Snyk monitor
        run: snyk test --sarif-file-output=snyk.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  build:
    name: build
    needs:
      - review_secrets
      - snyk
      - semgrep
      - lint
      - compliance-copyrights
      - compliance-dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          #Very Important semantic-release won't trigger a tagged
          #build if this is not set false
          persist-credentials: false
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Run Check there are libraries to scan
        id: checklibs
        run: if [ -f requirements_dev.txt ]; then echo "::set-output name=ENABLED::true"; fi
      - name: pip cache
        if: ${{ steps.checklibs.outputs.ENABLED == 'true' }}
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements_dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps
        if: ${{ steps.checklibs.outputs.ENABLED == 'true' }}
        run: pip install -r requirements_dev.txt
      - name: Semantic Release Get Next
        id: semantic
        if: github.event_name != 'pull_request'
        uses: cycjimmy/semantic-release-action@v2.5.4
        with:
          semantic_version: 17
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
          dry_run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
      - name: Determine the version to build
        id: BuildVersion
        uses: splunk/addonfactory-get-splunk-package-version-action@v1
        with:
          SemVer: ${{ steps.semantic.outputs.new_release_version }}
          PrNumber: ${{ github.event.number }}
      - uses: actions/download-artifact@v2
        with:
          name: analysis-reports
          path: /tmp/analysis-reports
      - name: Update Notices
        run: |
          cp -f /tmp/analysis-reports/NOTICE_default THIRDPARTY || true
          cp -f /tmp/analysis-reports/NOTICE_default package/THIRDPARTY || true
      - name: Build Package
        id: uccgen
        uses: splunk/addonfactory-ucc-generator-action@v1
        with:
          version: ${{ steps.BuildVersion.outputs.VERSION }}
      - name: Slim Package
        id: slim
        uses: splunk/addonfactory-packaging-toolkit-action@v1
        with:
          source: ${{ steps.uccgen.outputs.OUTPUT }}
      - name: artifact-splunk-unpacked
        uses: actions/upload-artifact@v2
        with:
          name: package-raw
          path: ${{ steps.uccgen.outputs.OUTPUT }}**
        if: always()
      - name: artifact-splunk-base
        uses: actions/upload-artifact@v2
        with:
          name: package-splunkbase
          path: ${{ steps.slim.outputs.OUTPUT }}
        if: always()
      - name: artifact-splunk-parts
        uses: actions/upload-artifact@v2
        with:
          name: package-deployment
          path: build/package/deployment**
        if: always()

  security-virustotal:
    name: security-virustotal
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: package-splunkbase
          path: build/package/

      - name: VirusTotal Scan
        uses: crazy-max/ghaction-virustotal@v2
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: |
            build/package/*
  test-inventory:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      unit: ${{ steps.testset.outputs.outputs }}
      knowledge: ${{ steps.testset.outputs.knowledge }}
    steps:
      - uses: actions/checkout@v2
      - id: testset
        name: testsets
        run: |
          find tests -type d -maxdepth 1 -mindepth 1 | sed 's|^tests/||g' |  while read -r TESTSET; do echo "::set-output name=$TESTSET::true"; echo "$TESTSET::true"; done
  test-unit:
    name: test-unit-python3-${{ matrix.python-version }}
    if: ${{ needs.test-inventory.outputs.unit == 'true' }}
    runs-on: ubuntu-latest
    needs:
      - build
      - test-inventory
    strategy:
      matrix:
        python-version:
          - "3.7"
    steps:
      - uses: actions/checkout@v2
      - if: failure()
        name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/download-artifact@v2
        with:
          name: package-raw
          path: output
      - name: Setup addon
        run: |
          if [ -f "poetry.lock" ]
           then
             mkdir -p package/lib || true
             pip install poetry
             poetry export --without-hashes -o package/lib/requirements.txt
             poetry export --without-hashes --dev -o requirements_dev.txt
           fi
          if [ ! -f requirements_dev.txt ]; then echo no requirements;exit 0 ;fi
          pip install -r requirements_dev.txt
      - name: Run Pytest with coverage
        run: pytest --cov=./ --cov-report=xml --junitxml=test-results/junit.xml tests/unit
      - name: Run Check if codecov enabled
        id: checkcodecov
        run: if [ -n "$CODECOV_TOKEN" ]; then echo "::set-output name=ENABLED::true"; fi
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload coverage to Codecov
        if: ${{ steps.checkcodecov.outputs.ENABLED == 'true' }}
        uses: codecov/codecov-action@v2.0.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          directory: ./coverage/reports/
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true
      - uses: actions/upload-artifact@v2 # upload test results
        if: success() || failure() # run this step even if previous step failed
        with:
          name: test-results-unit-python_${{ matrix.python-version }}
          path: test-results/*

  appinspect:
    name: quality-appinspect-${{ matrix.tags }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tags:
          - "cloud"
          - "appapproval"
          - "deprecated_feature"
          - "developer_guidance"
          - "future"
          - "self-service"
          - "splunk_appinspect"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: package-splunkbase
          path: build/package/

      - name: Scan
        uses: splunk/appinspect-cli-action@v1
        with:
          app_path: build/package/
          included_tags: ${{ matrix.tags }}

  artifact-registry:
    runs-on: ubuntu-latest
    needs:
      - appinspect
      - security-virustotal
    outputs:
      artifact: ${{ steps.artifactid.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package-splunkbase
          path: build/package/splunkbase

      - id: getappid
        run: |
          appid=$(jq -r '.info.id.name' package/app.manifest)
          echo appid=$appid
          echo "::set-output name=result::$(echo $appid)"
      - run: |
          curl -fsSL https://raw.githubusercontent.com/fishworks/gofish/main/scripts/install.sh | bash
          gofish init
          gofish install oras
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern=v{{major}}.{{minor}},prefix=${{ steps.getappid.outputs.result }}-
            type=semver,pattern=v{{major}},prefix=${{ steps.getappid.outputs.result }}-
            type=semver,pattern=v{{version}},prefix=${{ steps.getappid.outputs.result }}-
            type=semver,pattern={{major}}.{{minor}},prefix=${{ steps.getappid.outputs.result }}-
            type=semver,pattern={{major}},prefix=${{ steps.getappid.outputs.result }}-
            type=semver,pattern={{version}},prefix=${{ steps.getappid.outputs.result }}-
            type=ref,event=branch,prefix=${{ steps.getappid.outputs.result }}-
            type=ref,event=pr,prefix=${{ steps.getappid.outputs.result }}-
            type=sha,prefix=${{ steps.getappid.outputs.result }}-
            type=sha,format=long,prefix=${{ steps.getappid.outputs.result }}-
      - name: Upload artifacts
        run: |
          tee /tmp/tags &>/dev/null <<EOF
          ${{ steps.meta.outputs.tags }}
          EOF
          pushd build/package/splunkbase/
          PACKAGE=$(ls *)
          echo $PACKAGE
          mv $PACKAGE ${{ steps.getappid.outputs.result }}.spl
          while IFS= read -r line
          do 
            echo ">>$line<<"
            oras push \
                --manifest-config /dev/null:application/vnd.splunk.ent.package.v1.tar+gzip \
                $line \
                ${{ steps.getappid.outputs.result }}.spl
            echo "  complete"
          done < /tmp/tags
          popd
      - name: Output artifact locator
        id: artifactid
        run: |
          echo "::set-output name=result::$(echo ${{ fromJSON(steps.meta.outputs.json).tags[0] }})"

  # test-integration:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - artifact-registry
  #   steps:
  #     - name: Extract branch name
  #       shell: bash
  #       run: |
  #         if [ -z $GITHUB_HEAD_REF ]
  #         then
  #           REF=${GITHUB_REF##*/}
  #         else
  #           REF=$GITHUB_HEAD_REF
  #         fi
  #         echo current ref is ${{ github.ref }}
  #         echo current head ref is ${{ github.head_ref }}
  #         echo using $REF
  #         echo "##[set-output name=branch;]$(echo $REF)"
  #       id: extract_branch
  #     - name: Trigger CircleCI build-beta workflow.
  #       uses: promiseofcake/circleci-trigger-action@v1
  #       with:
  #         user-token: ${{ secrets.CIRCLECI_TOKEN }}
  #         project-slug: ${{ github.repository }}
  #         branch: ${{ steps.extract_branch.outputs.branch }}
  #         payload: '{"run_test_integration_workflow": true, "artifact": "${{ needs.artifact-registry.outputs.artifact }}"}'

  # - name: Semantic Release
  #   uses: cycjimmy/semantic-release-action@v2.5.4
  #   with:
  #     semantic_version: 17
  #     extra_plugins: |
  #       @semantic-release/exec
  #       @semantic-release/git
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.SEMREL_TOKEN }}
  #     PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #     PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

  update-semver:
    name: release-set-git-tags
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - test-unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: haya14busa/action-update-semver@v1
# jscpd:ignore-end
